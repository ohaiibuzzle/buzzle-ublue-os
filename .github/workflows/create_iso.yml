---
name: Create ISO release
on:
  workflow_dispatch:

env:
  ARCH: "x86_64"
  IMAGE_NAME: "buzzle-ublue-os" # the name of the image produced by this build, matches repo names
  IMAGE_DESC: "Buzzle's Universal Blue Image"
  IMAGE_TAG: "latest"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}" # do not edit
  VARIANT: "main"
  VERSION: "42"
  ARTIFACTHUB_LOGO_URL: "https://avatars.githubusercontent.com/u/120078124?s=200&v=4" # You should put your own image here so that you get a fancy profile image on https://artifacthub.io/!

jobs:
  build_push:
    name: Build and push image
    runs-on: ubuntu-24.04

    permissions:
      contents: write
      packages: read
      id-token: write

    steps:
      # These stage versions are pinned by https://github.com/renovatebot/renovate
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e # v9
        with:
          remove-codeql: true

      - name: Get current date
        id: date
        run: |
          # This generates a timestamp like what is defined on the ArtifactHub documentation
          # E.G: 2022-02-08T15:38:15Z'
          # https://artifacthub.io/docs/topics/repositories/container-images/
          # https://linux.die.net/man/1/date
          echo "date=$(date -u +%Y\-%m\-%d\T%H\:%M\:%S\Z)" >> $GITHUB_OUTPUT
          # Time in form of ddmmyyyyhhmm for CI
          echo "timestamp=$(date -u +%d%m%Y%H%M)" >> $GITHUB_OUTPUT
      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Build ISO
        uses: jasonn3/build-container-installer@main
        id: build
        with:
          arch: ${{ env.ARCH }}
          image_name: ${{ env.IMAGE_NAME }}
          image_repo: ${{ steps.registry_case.outputs.lowercase }}
          image_tag: ${{ env.IMAGE_TAG }}
          version: ${{ env.VERSION }}
          variant: ${{ env.VARIANT }}
          iso_name: ${{ env.IMAGE_NAME }}-${{ env.IMAGE_TAG }}-${{ env.VERSION }}.iso

      - name: Upload ISO checksums as artifact
        id: upload-checksum
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.iso_name }}-CHECKSUM
          path: ${{ steps.build.outputs.iso_name }}-CHECKSUM
          if-no-files-found: error
          retention-days: 0
          compression-level: 0

      - name: Upload ISO as artifact
        id: upload-iso
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.iso_name }}
          path: ${{ steps.build.outputs.iso_name }}
          if-no-files-found: error
          retention-days: 0
          compression-level: 0

      # - name: Upload image to R2
      #   id: image_r2_upload
      #   env:
      #     RCLONE_CONFIG_R2_TYPE: "s3"
      #     RCLONE_CONFIG_R2_PROVIDER: "Cloudflare"
      #     RCLONE_CONFIG_R2_ENV_AUTH: true
      #     RCLONE_CONFIG_R2_ACCESS_KEY_ID: ${{ secrets.RCLONE_ACCESS_KEY_ID }}
      #     RCLONE_CONFIG_R2_SECRET_ACCESS_KEY: ${{ secrets.RCLONE_SECRET_ACCESS_KEY }}
      #     RCLONE_CONFIG_R2_ENDPOINT: ${{ secrets.RCLONE_ENDPOINT }}
      #     RCLONE_CONFIG_R2_NO_CHECK_BUCKET: true
      #   run: |
      #     sudo -v ; curl https://rclone.org/install.sh | sudo bash
      #     rclone copy "${{ steps.build.outputs.iso_name }}" r2:buzzle-ublue/
